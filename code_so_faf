

/*Questions for LIMIT*/

select id, account_id, occurred_at
from orders

/* Try using LIMIT yourself below by writing a query that displays all the data in the occurred_at, account_id, and channel columns of the web_events table, and limits the output to only the first 15 rows.*/

SELECT occurred_at, account_id, channel
FROM web_events
LIMIT 15

/* Quuestions for Order By */
/*Question 1
Write a query to return the 10 earliest orders in the orders table. Include the id, occurred_at, and total_amt_usd.
*/

SELECT orders.id, orders.occurred_at, orders.total_amt_usd
FROM orders
order by orders.id DESC
limit 5;

/*Question 2
Write a query to return the top 5 orders in terms of the largest total_amt_usd. Include the id, account_id, and total_amt_usd.
*/

SELECT orders.id, orders.account_id, orders.total_amt_usd
FROM orders
order by orders.id DESC
limit 5;

/* Question 3
Write a query to return the lowest 20 orders in terms of the smallest total_amt_usd. Include the id, account_id, and total_amt_usd */

SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd 
LIMIT 20;

/*Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order).*/

select orders.id, orders.account_id, orders.total_amt_usd
from orders
order by orders.account_id, orders.total_amt_usd DESC;


/*Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order).*/

select id, account_id, total_amt_usd
from orders
ORDER BY total_amt_usd DESC, account_id
LIMIT 10;

/*Questionson WHERE*/

/*Pulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000. */

select *
from orders
where gloss_amt_usd > 999
limit 5;

/*Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.*/

select *
from orders
where total_amt_usd <500
limit 10;

/*Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) just for the Exxon Mobil company in the accounts table.*/

SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil';

/*Arithmetic operators*/
/*Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields.*/

select id, account_id, standard_amt_usd/standard_qty as Unit_price
from orders
limit 10

/*Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (Try to do this without using the total column.) Display the id and account_id fields also. NOTE - you will receive an error with the correct solution to this question. This occurs because at least one of the values in the data creates a division by zero in your formula. There are ways to better handle this. For now, you can just limit your calculations to the first 10 orders, as we did in question #1, and you'll avoid that set of data that causes the problem.*/

SELECT id, account_id, (poster_amt_usd/(poster_amt_usd+standard_amt_usd+gloss_amt_usd))*100 AS percent_revenue 
FROM orders
limit 10;


/*Logical operators: LIKE*/
/*All the companies whose names start with 'C'*/

select *
from accounts
where name LIKE 'C%';

/*All companies whose names contain the string 'one' somewhere in the name.*/
select *
from accounts
where name LIKE '%one%';

/*All companies whose names end with 's'*/
select *
from accounts
where name LIKE '%s';

/*Logical Operator : IN*/

/*Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.*/

select name, primary_poc, sales_rep_id
from accounts
where name IN ('Walmart', 'Target', 'Nordstrom');

/*Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.*/
select *
from web_events
where channel IN ('organic', 'adwords')
order by channel;

/*Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.*/

select name, primary_poc, sales_rep_id
from accounts
where name NOT IN ('Walmart', 'Target', 'Nordstrom');

/*Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.*/

select *
from web_events
where channel NOT IN ('organic', 'adwords');

/*All the companies whose names do not start with 'C'.*/
select name
from accounts
where name NOT LIKE 'C%';

/*All companies whose names do not contain the string 'one' somewhere in the name.*/
select name
from accounts
where name NOT LIKE '%one%';

/*All companies whose names do not end with 's'.*/
select name
from accounts
where name NOT LIKE '%s';

/*Logical Operator AND and BETWEEN*/

/*Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.*/

select *
from orders
where standard_qty >1000 AND  poster_qty =0 AND gloss_qty = 0;

/*Using the accounts table, find all the companies whose names do not start with 'C' and end with 's'.*/
select name
from accounts
where name NOT LIKE 'C%' AND name LIKE '%S';

/*When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and gloss_qty data for all orders where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.*/

select occurred_at, gloss_qty
from orders
where gloss_qty BETWEEN 24 AND 29
ORDER BY gloss_qty DESC;

/*Use the web_events table to find all information regarding individuals who were contacted via the organic or adwords channels, and started their account at any point in 2016, sorted from newest to oldest.*/

select *
from web_events
where channel in ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
order by occurred_at DESC;

/*Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include the id field in the resulting table.*/

SELECT id
from orders
where gloss_qty >4000 OR poster_qty > 4000;


/*Write a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000.*/
select *
from orders
where standard_qty = 0 AND (gloss_qty > 1000 or poster_qty >1000);

/*Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.
*/

select *
from accounts
where (name like 'C%' OR name LIKE 'W%')
AND (primary_poc like '%ana%' OR primary_poc LIKE '%Ana%')
AND primary_poc NOT LIKE '%eana%';

/* Questions on JOIN*/

/*Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to the account name.*/

select region.name AS Region, sales_reps.name as Sales_Rep, accounts.name as Accounts
from accounts
join sales_reps
on accounts.sales_rep_id = sales_reps.id
join region
ON region.id =sales_reps.region_id
where region.name = 'Midwest' 
Order by Accounts;

/*Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to the account name.*/

select region.name AS Region, sales_reps.name as Sales_Rep, accounts.name as Accounts
from accounts
join sales_reps
on accounts.sales_rep_id = sales_reps.id
join region
ON region.id =sales_reps.region_id
where region.name = 'Midwest' 
AND sales_reps.name like ('S%')
Order by Accounts;

/*Provide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to the account name.*/

select region.name AS Region, sales_reps.name as Sales_Rep, accounts.name as Accounts
from accounts
join sales_reps
on accounts.sales_rep_id = sales_reps.id
join region
ON region.id =sales_reps.region_id
where region.name = 'Midwest' 
AND sales_reps.name like ('K%')
Order by Accounts;

/*Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01).*/

select region.name AS region,   accounts.name as accounts, (total_amt_usd/(total+0.1)) AS unit_price
from orders
join accounts
on accounts.id = orders.account_id
join sales_reps  
on sales_reps.id = accounts.sales_rep_id
join region
on sales_reps.region_id = region.id
where orders.standard_qty > 100;
                                               /*Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01).*/                     
select region.name AS region,   accounts.name as accounts, (total_amt_usd/(total+0.1)) AS unit_price
from orders
join accounts
on accounts.id = orders.account_id
join sales_reps  
on sales_reps.id = accounts.sales_rep_id
join region
on sales_reps.region_id = region.id
where orders.standard_qty > 100
AND orders.poster_qty >50
order by unit_price;                           
                                               
/*Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01).*/                            
select region.name AS region,   accounts.name as accounts, (total_amt_usd/(total+0.1)) AS unit_price
from orders
join accounts
on accounts.id = orders.account_id
join sales_reps  
on sales_reps.id = accounts.sales_rep_id
join region
on sales_reps.region_id = region.id
where orders.standard_qty > 100
AND orders.poster_qty >50
order by unit_price DESC;
                                               
/*What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.*/                           
select DISTINCT accounts.name, web_events.channel     
from accounts
join web_events
on web_events.account_id= accounts.id
where accounts.id = 1001;

/*Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order total_amt_usd.*/                          
select web_events.occurred_at, accounts.name, orders.total, orders.total_amt_usd
from accounts
join orders                                     
on accounts.id = orders.account_id
join web_events
on web_events.account_id = accounts.id 
where web_events.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'
ORDER BY web_events.occurred_at DESC;
